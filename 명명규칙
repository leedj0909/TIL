명명규칙 CORE 판 0.3 ver

필독 !!
감리 라고 개발한 프로젝트에 대해 전체적으로 명칭이나 기타 등등 검사하러오는 감리단이 있는데,
감리를 받게되는 프로젝트의 경우 DB의 컬럼명과 컬럼에 해당하는 Comment 를 신경써야한다.
아래 적어둔 컬럼 네이밍 규칙을 제외하고, 자신이 새로운 이름의 컬럼을 만들어야 하는 경우가 생긴다. 그런 경우 몇가지 주의사항이 있는데 아래 예시를 보면 도움이 된다.

Example

시설물 테이블은 MEC_S_FACILITY 라고 가정
시설물 신청에 대한 컬럼들을 생성하려하는데, 시설물 명, 등록일, 수정일 등등 여러가지 컬럼이 들어갈 것이다.
근데 여기서 시설물 명 =  제목 이라고 생각할 수도 있다. 이에 따라서 2가지 방법으로 컬럼명 생성이 가능한데


공통으로 사용하는 컬럼 네이밍 규칙 사용하기

컬럼명 : TITLE  / 코멘트 : 제목



해당 테이블에서만 사용할 컬럼 네이밍 규칙 생성하기

컬럼명: FACILITY_NAME OR FACILITY_TITLE / 코멘트 : 시설물 이름(명)



2 개 중에서 편한 방법을 사용하면된다.
근데 만약 !! 아래 처럼 한다면 감리때 아마 탈탈 털릴 수도 있다.

컬럼명 : TITLE / 코멘트 : 시설물 명

즉, 다른 곳에서는 TITLE 을 제목이라는 코멘트로 사용하고 있는데, 시설물 테이블에서는 코멘트를 시설물 명으로 해버리면 이게 감리받을 때 문제가 된다.

패키지 구조

egovframework

com


net

mayeye

core [MEC_CORE 관련]

util ...
module [사용할 모듈들만 추가]

{program 명} [VO]

repository [Repository]
service [Service / ServiceImpl]
web [Controller]






cms [관리자 페이지 관련]

{program}

repository
service
web




site [사용자 페이지 관련]

{program}

repository
service
web










주석 규칙

주석 작성 tip

add javadoc 단축키 : 컨트롤+쉬프트+R
파라미터 및 리턴 타입 작성을 모두 완료한 후 생성 권장


Class

클래스파일명
클래스파일설명
==============================================
@author : 작성자
@history : 작성일 / 작성자 / 변경내용
==============================================



/**
 * {파일명}.java 
 * {해당 파일에 대한 설명}
 * ==============================================
 * @author {최초 작성자}
 * @history     작성일            작성자     변경내용
 * @history {작성일 yyyy.MM.dd}  {작성자}   {변경내용}
 * ==============================================
 */

 /**
 * UserController.java
 * User Domain CRUD Controller class
 * ==============================================
 * @author 박준영
 * @history     작성일     작성자     변경내용
 * @history 2019.03.18    박준영      최초작성
 * ==============================================
 */

Method

메소드 설명
@param : 파라미터 변수명

@attribute (변수명) : 해당 파라미터 변수의 필수속성 설명


@return : return 값 + REST 방식의 경우 해당 값에 대한 설명



    /**
     * {메소드 설명}
     * @param {변수명}
     * - @attribute {변수명} : {변수설명}
     * @return {리턴 값}
     */

    /**
     * 사용자를 등록한다.
     * @param userVO
     * - @attribute id : 사용자아이디
     * - @attribute password : 패스워드
     * - @attribute nm : 사용자명
     * @param result
     * @param model
     * @param redirectAttributes
     * @return "redirect:/"
     */
    @PostMapping
    public String userIns(
            @Valid UserVO userVO,
            BindingResult result,
            ModelMap model,
            RedirectAttributes redirectAttributes) {
        if(result.hasErrors()) {
            return "prog/users/form";
        }
        userService.createUser(userVO);
        redirectAttributes.addFlashAttribute("message","등록되었습니다.");
        return "redirect:/";
    }

XML

XML파일명
XML파일설명
==============================================
@author : 작성자
@history : 작성일 / 작성자 / 변경내용
==============================================



<!-- 
	{XML파일명}.xml
	{XML파일설명} xml
	==============================================
	@author {최초작성자}
    @history     작성일            작성자     변경내용
    @history {작성일 yyyy.MM.dd}  {작성자}   {변경내용}
	==============================================
-->

<!-- 
	Draft_Mysql.xml
	디자인 시안 xml
	==============================================
	@author JAR
	@history     작성일     작성자     변경내용
	@history 2019.03.18  JAR   최초작성
	==============================================
-->

JSP

JSP파일명
JSP파일설명
==============================================
@author : 작성자
@history : 작성일 / 작성자 / 변경내용
==============================================



<%--
/**
 * {파일명}.java 
 * {해당 파일에 대한 설명}
 * ==============================================
 * @author {최초 작성자}
 * @history     작성일            작성자     변경내용
 * @history {작성일 yyyy.MM.dd}  {작성자}   {변경내용}
 * ==============================================
 */
--%>

<%--
/**
 * list.jsp
 * 프로젝트 목록 페이지
 * ==============================================
 * @author JAR
 * @history     작성일     작성자     변경내용
 * @history 2019.03.18  JAR   최초작성
 * ==============================================
 */
--%>


JAVASCRIPT


JS 파일

JS파일명
JS파일설명
==============================================
@author : 작성자
@history : 작성일 / 작성자 / 변경내용
==============================================



/**
 * {파일명}.java 
 * {해당 파일에 대한 설명}
 * ==============================================
 * @author {최초 작성자}
 * @history     작성일            작성자     변경내용
 * @history {작성일 yyyy.MM.dd}  {작성자}   {변경내용}
 * ==============================================
 */

/**
 * Common.js
 * 공통기능 js
 * ==============================================
 * @author 박준영
 * @history     작성일     작성자     변경내용
 * @history 2019.03.18    박준영      최초작성
 * ==============================================
 */

function

함수설명
@param : 파라미터 변수명

@attribute (변수명) : 해당 파라미터 변수의 필수속성 설명


@return : return 값



    /**
     * {메소드 설명}
     * @param {변수명}
     * - @attribute {변수명} : {변수설명}
     * @return {리턴 값}
     */
     
    /**
     * 사용자를 등록한다.
     * @param userVO
     * - @attribute id : 사용자아이디
     * - @attribute password : 패스워드
     * - @attribute nm : 사용자명
     * @param result
     * @param model
     * @param redirectAttributes
     * @return
     */

URL 규칙

관리자 : /mec/{programSeq:[0-9]+}/프로그램명/**

컨트롤러 최상단 : @RequestMapping("/mec/{programSeq:[0-9]+}/프로그램명")


사용자 : /{siteCode}/{programSeq:[0-9]+}/프로그램명/**

컨트롤러 최상단 : @RequestMapping("/{siteCode}/{programSeq:[0-9]+}/프로그램명")




GET vs POST

핸들러 메서드 이름은 @RequestMapping 혹은 @PostMapping 안에 있는 이름과 동일하게 만든다.


GET 방식 : @RequsetMapping

목록 : @RequestMapping("/list")
등록 폼 : @RequestMapping("/wrt")
수정 폼 : @RequestMapping("/{seq}/mod")
상세 : @RequestMapping("/{seq}/view")


POST 방식 : @PostMapping

등록 : @PostMapping("/ins")
수정 : @PostMapping("/udt")
삭제 : @PostMapping("/del")
복원 : @PostMapping("/recovery")
완전삭제 : @PostMapping("/remove")
등록 수정 같이 사용해야 하는 경우 : @PostMapping("/edit")




프로젝트 명 네이밍 규칙

관리자 : MEC_프로젝트 별칭

ex) MEC_KONGJU


사용자 : MEC_프로젝트 별칭_SITE

ex) MEC_KONGJU_SITE




테이블 네이밍 규칙

테이블은 대문자로 생성


CORE

MEC_C_프로그램명


NEW FEATURE

MEC_S_프로그램명


CMS 사용 안하는 별도의 프로그램

MEC_프로그램명




테이블 컬럼 네이밍 규칙

Example : 테이블명 > MEC_C_ARTICLE



주의 사항

테이블명과 컬럼명은 대문자로 생성



일련번호(PK)

테이블명_SEQ
ex) ARTICLE_SEQ



외래키(FK)

참조테이블명_SEQ
ex) ARTICLE_MASTER_SEQ



제목

TITLE



내용

CONTENTS



기타(단, 내용(CONTENTS, textArea)이 있고 추가로 textArea 가 필요하며, 해당 textArea 이름이 기타인 경우)

ETC



시작일

START_DATE



종료일

END_DATE



시작시간

START_TIME



종료시간

END_TIME



삭제여부

DEL_STS



등록일

REG_DATE



수정일

MOD_DATE



등록자 이름

REG_NAME



수정자 이름

MOD_NAME



등록자 ID

REG_ID



수정자 ID

MOD_ID



조회수

HIT



첨부파일 키값

ATCH_FILE_ID



누리코드

NURI_CODE



Y/N 상태를 가지는 컬럼

별칭_STS



Y/N 이 아닌 여러 상태를 가지는 컬럼(F, C, D 등...)

별칭_TYPE



신청일

APPLY_DATE



순서

SORT




클래스 네이밍 규칙

테이블 명을 가운데 구분자(C/S) 제외하고 카멜케이스로 변환

Mec프로그램명.java


Example

MEC_S_FACILITY_APPLY
MecFacilityApply.java




Method 명
[list] List<{ProgramName}VO> find{ProgramName}All({ProgramName}VO {programName}VO);
List<BoardVO> findBoardAll(BoardVO boardVO);
[count] int count{ProgramName}({ProgramName}VO {programName}VO);
int countBoard(BoardVO boardVO);
[view] {ProgramName}VO find{ProgramName}({ProgramName}VO {programName}VO);
BoardVO findBoard(BoardVO boardVO);
[create] void create{ProgramName}({ProgramName}VO {programName}VO);
void createBoard(BoardVO boardVO);
[update] void update{ProgramName}({ProgramName}VO {programName}VO);
void updateBoard(BoardVO boardVO);
[delete(update방식)] void delete{ProgramName}({ProgramName}VO {programName}VO);
void deleteBoard(BoardVO boardVO);
[delete(delete방식)] void remove{ProgramName}({ProgramName}VO {programName}VO);
void removeBoard(BoardVO boardVO);

XML 네이밍 규칙


테이블 명을 가운데 구분자(C/S) 제외하고 스네이크 케이스로 작성, 프로그램명은 카멜케이스, 마지막에는 MySQL 과 Tibero 작성

Mec_프로그램명_MySQL.xml
Mec_프로그램명_Tibero.xml



Example

MEC_S_FACILITY_APPLY
Mec_FacilityApply_MySQL.xml




타일즈 규칙

관리자

기본 타일즈 적용


*.core, */*.core 등
roleHistory/list.core;


팝업 용 타일즈


*.pop, */*.pop 등
roleHistory/popupList.pop;


사용자 타일즈


*/*.site, */*/*.site

roleHistory/list.site;




사용자

메인 타일즈 적용

*/*.main
roleHistory/index.main;


서브 타일즈 적용


*/*.sub 등
roleHistory/list.sub;


팝업 용 타일즈


*.pop, */*.pop 등
roleHistory/popupList.pop;


PDF 타일즈


*.pdf, */*.pdf 등
roleHistory/popupList.pdf;




공통 으로 쓰이는 애들을 위한 타일즈


*.comn, */*.comn 등
roleHistory/list.comn
